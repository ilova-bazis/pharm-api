// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int         @id @default(autoincrement())
  username      String      @unique
  password_hash String      
  avatar        String?
  doctor_id     Int?
  patient_id    Int?
  pharmacy_id   Int?
  admin_id      Int?
  
  person_id     Int?

  created_at    DateTime
  updated_at    DateTime    @updatedAt
  last_active   DateTime?



  doctor        Doctor?     @relation(fields: [doctor_id], references: [id])
  patient       Patient?    @relation(fields: [patient_id], references: [id])
  pharmacy      Pharmacy?   @relation(fields: [pharmacy_id], references: [id])
  person        Person?     @relation(fields: [person_id], references: [id])

  phones        Phone[]
  emails        Email[]

  conversation_to_users  ConversationToUser[]
  messages      Message[]

  @@map("users")
}

model Person {
  id            Int          @id @default(autoincrement())
  first_name    String
  last_name     String?
  middle_name   String?
  sex           Sex
  dob           DateTime
  national_id   String?      @unique
  nationality   String?
  tax_id        String?      @unique
  address_id    Int
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  patient_id    Int?         @unique
  phone_number  String?      

  user_id       Int?
  users         User[]
  patient       Patient?     @relation(fields: [patient_id], references: [id])
  adress        Address     @relation(fields: [address_id], references: [id])

  @@map("persons")
}

model Patient {
  id              Int         @id @default(autoincrement())
  family_doctor   String  @default("")
  created_at      DateTime
  updated_at      DateTime    @updatedAt
  
  person          Person?   
  users           User[]

  prescriptions   Prescription[]
  appointments    Appointment[]

  @@map("patients")
}

model Doctor {
  id            Int             @id @default(autoincrement())
  location_id   Int
  speciality_id Int
  speciality    Speciality      @relation(fields: [speciality_id], references: [id])
  location      Location        @relation(fields: [location_id], references: [id])
  prescriptions Prescription[]
  users         User[]
  signature     Signature?

  appointments  Appointment[]
  
  @@map("doctors")
}

model Phone {
  id            Int
  number        String      @unique
  user_id       Int
  created_at    DateTime
  updated_at    DateTime

  user          User        @relation(fields: [user_id], references: [id])

  @@map("phones")
}

model Email {
  id            Int
  email         String       @unique
  user_id       Int
  created_at    DateTime
  updated_at    DateTime

  user          User        @relation(fields: [user_id], references: [id])

  @@map("emails")
}

model Address {
  id            Int         @id @default(autoincrement())
  address       String
  city          String
  region        String?
  postal_code   String
  country       String
  
  created_at    DateTime
  updated_at    DateTime

  persons      Person[]
  locations    Location[]

  @@map("addresses")
}

model Admin {
  id            Int             @id @default(autoincrement())
  
  updated_at    DateTime        @updatedAt
  created_at    DateTime

  @@map("admins")
}

model Pharmacy {
  id            Int             @id @default(autoincrement())
  name          String
  created_at    DateTime
  updated_at    DateTime        @updatedAt
  users         User[]

  locations    PharmacyLocation[]

  @@map("pharmacies")
}

model PharmacyLocation {
  id            Int         @id @default(autoincrement()) 
  pharmacy      Pharmacy    @relation(fields: [pharmacy_id], references: [id])
  pharmacy_id   Int     
  location      Location    @relation(fields: [location_id], references: [id])
  location_id   Int
  assigned_at   DateTime    @default(now())    

  // @@id([pharmacy_id, location_id])
  @@map("pharmacy_location_map")

}

model Speciality {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  created_at  DateTime
  updated_at  DateTime    @updatedAt

  doctors     Doctor[]

  @@map("specialities")
}

model Location {
  id          Int           @id @default(autoincrement())
  name        String
  address_id  Int?
  description String
  created_at  DateTime
  updated_at  DateTime      @updatedAt
  type        LocationType
  doctors     Doctor[]
  pharmacies  PharmacyLocation[]
  address     Address?      @relation(fields: [address_id], references: [id])

  @@map("locations")
}

model Prescription {
  id              Int           @id @default(autoincrement())
  doctor_id       Int   
  pharmacy_id     Int
  patient_id      Int
  status          String
  signature       String
  notes           String
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  signed_at       DateTime?
  doctor          Doctor        @relation(fields: [doctor_id], references: [id])
  patient         Patient       @relation(fields: [patient_id], references: [id])
  items           PrescriptionItem[]

  @@map("prescriptions")
}

model PrescriptionItem {
  id                Int             @id @default(autoincrement())
  prescription_id   Int
  product_id        Int
  dosage            String
  frequency         String
  dispense          Int
  notes             String
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
  checked_at        DateTime?        
  prescription      Prescription    @relation(fields: [prescription_id], references: [id])
  product           Product         @relation(fields: [product_id], references: [id])

  @@map("perscription_items")
}

model Product {
  id              Int           @id @default(autoincrement())
  name            String
  description     String
  created_at      DateTime      @default(now())
  prescriptions   PrescriptionItem[]
  @@map("products")
}

model Signature {
  id          String      @id @default(uuid())
  doctor_id   Int         @unique
  doctor      Doctor      @relation(fields: [doctor_id], references: [id])

  @@map("signatures")
}

model Appointment {
  id              Int         @id @default(autoincrement())
  scheduled_at    DateTime
  end_at          DateTime
  notes           String
  patient_id      Int
  doctor_id       Int
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt

  patient         Patient     @relation(fields: [patient_id], references: [id])
  doctor          Doctor      @relation(fields: [doctor_id], references: [id])
  
  @@map("appointments")
}

enum Sex {
  MALE
  FEMALE
}

enum LocationType {
  PHARMACY
  CLINIC
  POLYCLINIC
  HOSPITAL
  LABORATORY
  DIAGNOSTIC_CENTER
  DENTAL_CLINIC
}

// enum PrescriptionStatus {
//   PENDING
//   SIGNED
//   DISPENSED
//   CANCELLED

//   @@map("prescription_status")
// }


// Adding chat feature
// chat will have message model, conversation model

model Message {
  id            Int         @id @default(autoincrement())
  body          String
  author_id     Int
  conversation_id Int

  message_type  MessageType
  // seen_at       DateTime
  // delivered_at  DateTime
  // read_at       DateTime
  // deleted_at    DateTime
  author        User        @relation(fields: [author_id], references: [id])

  conversation  Conversation? @relation(fields: [conversation_id], references: [id])

  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt

  @@map("messages")
}

model Conversation {
  id            Int         @id @default(autoincrement())   
  messages      Message[]
  type          ConversationType
  group_name    String?
  group_image   String?
  // last_message  Message?

  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt

  conversation_to_users  ConversationToUser[]

  @@map("conversations")
}

model ConversationToUser {
  // id            Int         @id @default(autoincrement())
  user_id       Int
  user          User        @relation(fields: [user_id], references: [id])
  conversation_id Int       
  conversation    Conversation @relation(fields: [conversation_id], references: [id])
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt

  @@id([user_id, conversation_id])
  @@map("conversation_to_users")
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}

enum ConversationType {
  PRIVATE
  GROUP
}
